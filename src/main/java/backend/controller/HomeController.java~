package backend.controller;

import com.oauth.oauthbackend.entity.User;
import com.oauth.oauthbackend.service.JWTService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@RestController
public class HomeController {
    @Autowired
    private  JWTService jwtService;
    private User user = new User();

    @GetMapping("/login/oauth2/code/google")
    public ResponseEntity<Map<String, String>> getUser(@AuthenticationPrincipal OAuth2AuthenticatedPrincipal authentication) {
        System.out.println("Received request for /login/oauth2/code/google");
        if (authentication != null) {
            User user = new User();
            user.setEmail(authentication.getAttribute("email"));
            user.setFirstName(authentication.getAttribute("family_name"));
            user.setLastName(authentication.getAttribute("given_name"));
            user.setPicture(authentication.getAttribute("picture"));

            String accessToken = JWTService.generateAccessToken(user.getEmail(), user.getFirstName(), user.getLastName(), user.getPicture());
            String refreshToken = JWTService.generateRefreshToken(user.getEmail(), user.getFirstName(), user.getLastName(), user.getPicture());

            Map<String, String> response = new HashMap<>();
            response.put("accessToken", accessToken);
//            response.put("refreshToken", refreshToken);
//            response.put("email", user.getEmail());
//            response.put("firstName", user.getFirstName());
//            response.put("lastName", user.getLastName());
//            response.put("picture", user.getPicture());
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "User is not authenticated"));
        }

    }






    @GetMapping("/refresh")
    public ResponseEntity<Map<String, String>> refreshAccessToken(@RequestBody Map<String, String> request) {
        String refreshToken = request.get("refreshToken");

        // Validate refreshToken
        if (jwtService.validateToken(refreshToken)) {
            String email = JWTService.extractUsername(refreshToken);
            String newAccessToken = JWTService.generateAccessToken(email, "firstName", "lastName", "picture");
            return ResponseEntity.ok(Map.of("accessToken", newAccessToken));
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "Invalid refresh token"));
        }
    }



    @GetMapping("/api/user")
    public ResponseEntity<Map<String, String>> getToken(@AuthenticationPrincipal OAuth2AuthenticatedPrincipal authentication) {
        if (authentication != null) {
            // Log thông tin từ AuthenticationPrincipal
            System.out.println("Authenticated Principal: " + authentication.getAttributes());
            User user = new User();
            user.setEmail(authentication.getAttribute("email"));
            user.setFirstName(authentication.getAttribute("family_name"));
            user.setLastName(authentication.getAttribute("given_name"));
            user.setPicture(authentication.getAttribute("picture"));
            String email = authentication.getAttribute("email");
            if (email == null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", "Email is missing"));
            }
            Map<String, String> response = new HashMap<>();
            String token = JWTService.generateAccessToken(user.getEmail(), user.getFirstName(), user.getLastName(), user.getPicture());
            String refreshToken = JWTService.generateRefreshToken(user.getEmail(), user.getFirstName(), user.getLastName(), user.getPicture());
            return ResponseEntity.ok(Map.of("accessToken", token, "refreshToken", refreshToken));
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "User is not authenticated"));
        }
    }
}









